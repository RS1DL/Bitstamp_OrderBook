@page "/orderbookchart"
@attribute [StreamRendering]
@rendermode InteractiveServer
@using ApexCharts;
@using OrderBook.Shared.Models;
@using Microsoft.AspNetCore.SignalR.Client;
@using System.Globalization;

<h3>Order Book</h3>

<div class="chart-container">
    <ApexChart TItem="Order"
               Title="Order Book"
               @ref="_bookChart">
        
        <ApexPointSeries TItem="Order"
                         Items="bids"
                         Name="Bids"
                            XValue="@((b) => b.Price)"
                            YValue="@((b) => b.Amount)"
                            OrderByDescending="e=>e.Y"
                            SeriesType="SeriesType.Bar"
                            Color="#FF2400"
                         />

        <ApexPointSeries TItem="Order"
                         Items="asks"
                         Name="Asks"
                            XValue="@((a) => a.Price)"
                            YValue="@((a) => a.Amount)"
                            OrderByDescending="e=>e.Y"
                            SeriesType="SeriesType.Bar"
                            Color="#39FF14"
                         />
    </ApexChart>
</div>

<Row class="user-purchase-container">
        <RowCol>
            <label for="amount">BTC Amount</label>
            <input id="btcamount" type="number" class="amount-control"  
                @onchange="@((ChangeEventArgs __e) => UpdateAmount(__e?.Value?.ToString()))"/>
        </RowCol>
         <RowCol>
            <label for="amount">Prices (EUR)</label>
            <label class="price-control"> @Price  </label>
        </RowCol>
        <RowCol>
            <label for="amount">@Error</label>
        </RowCol>
        <RowCol>
           <button>Purchase</button>
        </RowCol>
</Row>

@code
{
    private HubConnection _hubConnection;
    private ApexChart<Order> _bookChart = default!;

    IEnumerable<Order> bids;
    IEnumerable<Order> asks;
    
    private decimal Price {get; set;} = 0;
    private decimal Amount {get; set;} = 0;
    private string Error {get; set;} = null;

    private void UpdateAmount(string value){
        if(decimal.TryParse(value, NumberStyles.Any, CultureInfo.InvariantCulture, out decimal result))
            Amount = result;
        else
            Amount = 0;

        UpdatePrice();
    }

    private void UpdatePrice(){
        if(Amount > 0 && asks != null && Amount < asks.Sum(a => a.Amount))
        {
            Price = CalculatePrice(Amount, asks);
            Error = null;
        }
        else {
            Error = "Amount is invalid";
        }
    }

    private decimal CalculatePrice(decimal amount, IEnumerable<Order> asks){
        decimal min_price = 0;

        var amount_left = amount;

        foreach(var ask in asks.OrderBy(a => a.Price)){
            if(ask.Amount >= amount_left){
                min_price += ask.Price * amount_left;
                break;
            }
            else{
                min_price += ask.Price * ask.Amount;
                amount_left -= ask.Amount;
            }
        }

        return min_price;
    }

    protected override async Task OnInitializedAsync()
    {
        string url = Environment.GetEnvironmentVariable("HUB_URL");

        _hubConnection = new HubConnectionBuilder()
            .WithUrl(Environment.GetEnvironmentVariable("HUB_URL") ?? "http://localhost:5192/orderbookhub")
            .Build();

        _hubConnection.On<LiveOrderBook>("ReceiveOrderBookCurrentState", async (book) =>
        {
            try{
                bids = book.Bids;
                asks = book.Asks;
                
                UpdatePrice();

                await _bookChart.UpdateSeriesAsync();
                await InvokeAsync(StateHasChanged);
            }
            catch(Exception ex){
                Console.WriteLine(ex.Message);
            }
        });

        await _hubConnection.StartAsync();
    }
}