@page "/orderbookchart"
@attribute [StreamRendering]
@rendermode InteractiveServer
@inject IJSRuntime JSRuntime
@inject ILogger<OrderBookChart> Logger
@using ApexCharts;
@using OrderBook.Shared.Models;
@using Microsoft.AspNetCore.SignalR.Client;
@using System.Globalization;

<h3>Order Book</h3>

<div class="chart-container">
    <ApexChart TItem="Order"
               Title="Order Book"
               @ref="_bookChart">
        
        <ApexPointSeries TItem="Order"
                         Items="bids"
                         Name="Bids"
                            XValue="@((b) => b.Price)"
                            YValue="@((b) => b.Amount)"
                            OrderByDescending="e=>e.Y"
                            SeriesType="SeriesType.Bar"
                         />

        <ApexPointSeries TItem="Order"
                         Items="asks"
                         Name="Asks"
                            XValue="@((a) => a.Price)"
                            YValue="@((a) => a.Amount)"
                            OrderByDescending="e=>e.Y"
                            SeriesType="SeriesType.Bar"
                         />
    </ApexChart>
</div>

@code
{
    public class Bid
    {
        public decimal Price { get; set; }
        public decimal Quantity { get; set; }
    }

    private HubConnection _hubConnection;
    private ApexChart<Order> _bookChart = default!;
    IEnumerable<Order> bids;
    IEnumerable<Order> asks;

    protected override async Task OnInitializedAsync()
    {
        _hubConnection = new HubConnectionBuilder()
            .WithUrl("http://localhost:5192/orderbookhub")
            .Build();

        _hubConnection.On<LiveOrderBook>("ReceiveOrderBookCurrentState", async (book) =>
        {
            Logger.LogInformation($"Received order book data {book.Bids.Count} bids and {book.Asks.Count} asks.");

            try
            {
                bids = book.Bids.GroupBy(b => b.Price)
                                           .Select(g => new Order { Price = g.Key, Amount = g.Sum(o => o.Amount) })
                                           .ToList();

                asks = book.Asks.GroupBy(b => b.Price)
                                           .Select(g => new Order { Price = g.Key, Amount = g.Sum(o => o.Amount) })
                                           .ToList();
            }
            catch (Exception ex)
            {
                Logger.LogError(ex, "Error parsing prices");
            }

            await _bookChart.UpdateSeriesAsync();
            await InvokeAsync(StateHasChanged);
        });

        await _hubConnection.StartAsync();
    }
}